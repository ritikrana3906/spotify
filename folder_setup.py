# import os

# folders = [
#     "spotify-recommender/data",
#     "spotify-recommender/models",
#     "spotify-recommender/notebooks",
#     "spotify-recommender/src",
#     "spotify-recommender/src/recommender",
# ]

# files = [
#     "spotify-recommender/README.md",
#     "spotify-recommender/requirements.txt",
#     "spotify-recommender/.gitignore",
#     "spotify-recommender/src/recommender/__init__.py",
# ]

# for folder in folders:
#     os.makedirs(folder, exist_ok=True)

# for file in files:
#     with open(file, "w") as f:
#         pass

# print("âœ… Project folder structure created!")
import os

structure = {
    "spotify-recommender": {
        "app": {
            "model": {
                "recommender.py": "",
                "data.pkl": None  # This will be generated by your model script later
            },
            "main.py": "",
            "requirements.txt": "fastapi\nuvicorn\nscikit-learn\npandas\njoblib\n"
        },
        "Dockerfile": """\
FROM python:3.9-slim

WORKDIR /app

COPY app/ ./app/
COPY app/requirements.txt .

RUN pip install --no-cache-dir -r app/requirements.txt

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
""",
        ".dockerignore": "__pycache__\n*.pyc\n*.pkl\ndebug.log\n.env",
        "README.md": "# Spotify KNN Recommender API\n\nThis project provides a song recommendation API using KNN.\n"
    }
}


def create_structure(base_path, tree):
    for name, content in tree.items():
        path = os.path.join(base_path, name)
        if isinstance(content, dict):
            os.makedirs(path, exist_ok=True)
            create_structure(path, content)
        elif isinstance(content, str):
            with open(path, "w") as f:
                f.write(content)
        elif content is None:
            open(path, "a").close()


create_structure(".", structure)
print("Project structure created.")
